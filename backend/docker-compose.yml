version: '3.9'

services:
  mysql:
    restart: always
    image: mysql:8
    ports:
      - "3308:3306"
    security_opt:
      - seccomp:unconfined
    volumes:
      - ~/apps/mysql:/var/lib/mysql
    environment:
      - MYSQL_ROOT_PASSWORD=69gidadi
      - MYSQL_PASSWORD=gidadi69
      - MYSQL_USER=xuser
      - MYSQL_DATABASE=comand_DB
    cap_add:
      - SYS_NICE
  frontend:
    restart: always
    pull_policy: always
    image: alex2902/skillbox-frontend
    ports:
      - "80:80"
  cache:
    image: redis:6.2-alpine
    restart: always
    ports:
      - "6379:6379"
    command: redis-server --save 20 1 --loglevel warning --requirepass eYVX7EwVmmxKFCDmwMtyKVge8oLd2t81
    volumes:
      - /home/zerone/redis/data
  backend:
    image: adoptopenjdk/openjdk11
    restart: always
    volumes:
      - ./jars:/app
    working_dir: /app
    command:  java -jar zerone-application-0.0.1-SNAPSHOT.jar --jasypt.encryptor.password=comandProject
    depends_on:
      - mysql
      - cache
    environment:
      REDIS_HOST: cache
      REDIS_PORT: 6379
      REDIS_PASSWORD: eYVX7EwVmmxKFCDmwMtyKVge8oLd2t81
    ports:
      - "8086:8086"
      - target: 1111
        published: 1111
        protocol: tcp
        mode: host
  grafana:
    build: './config/grafana'
    restart: always
    ports:
      - 3000:3000
    volumes:
      - ./grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
    networks:
      monitoring:
        aliases:
          - grafana
  prometheus:
    image: prom/prometheus
    restart: always
    ports:
      - 9090:9090
    volumes:
      - ./config/prometheus.yml:/etc/prometheus/prometheus.yml
      - ./prometheus:/prometheus
    networks:
      monitoring:
        aliases:
          - prometheus
  loki:
    image: grafana/loki:2.5.0
    container_name: loki
    restart: unless-stopped
    volumes:
      - ./config:/etc/loki/config
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      monitoring:
        aliases:
          - grafana
  promtail:
    image: grafana/promtail:2.5.0
    container_name: promtail
    restart: unless-stopped
    volumes:
      - /var/log:/var/log
      - ./config:/etc/promtail/config
      - /var/lib/docker:/var/lib/docker
    command: -config.file=/etc/promtail/config/promtail-config.yaml
    networks:
      monitoring:
        aliases:
          - grafana
  sonarqube:
    image: sonarqube:latest
    restart: always
    container_name: sonarqube
    depends_on:
      - postgres
    ports:
      - "9000:9000"
    networks:
      - tools
    environment:
      SONAR_JDBC_URL: jdbc:postgresql://postgres:5432/sonar
      SONAR_JDBC_USERNAME: sonar
      SONAR_JDBC_PASSWORD: sonar
    volumes:
      - ./sonarqube_data:/opt/sonarqube/data
      - ./sonarqube_extensions:/opt/sonarqube/extensions
      - ./sonarqube_logs:/opt/sonarqube/logs
      - ./sonarqube_temp:/opt/sonarqube/temp
  postgres:
    image: postgres:latest
    restart: always
    container_name: postgres
    environment:
      POSTGRES_DB: sonar
      POSTGRES_USER: sonar
      POSTGRES_PASSWORD: sonar
    ports:
      - "5432:5432"
    networks:
      - tools
    volumes:
      - ./postgres/data:/var/lib/postgres/data
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U sonar" ]
      interval: 10s
      timeout: 5s
      retries: 5
networks:
  monitoring:
  tools:
    driver: bridge

